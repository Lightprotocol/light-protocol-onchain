{
  "address": "9H1yjuq1gCLwQArXphX3aFKkeWZ7oK3i3C45HcfNGgdL",
  "metadata": {
    "name": "light_system_program",
    "version": "0.4.1",
    "spec": "0.1.0",
    "description": "ZK Compression on Solana",
    "repository": "https://github.com/Lightprotocol/light-protocol"
  },
  "instructions": [
    {
      "name": "init_cpi_context_account",
      "discriminator": [
        233,
        112,
        71,
        66,
        121,
        33,
        178,
        188
      ],
      "accounts": [
        {
          "name": "fee_payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "cpi_context_account",
          "writable": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "associated_merkle_tree"
        }
      ],
      "args": []
    },
    {
      "name": "invoke",
      "discriminator": [
        26,
        16,
        169,
        7,
        21,
        202,
        242,
        25
      ],
      "accounts": [
        {
          "name": "fee_payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "signer": true
        },
        {
          "name": "registered_program_pda",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  122,
                  247,
                  228,
                  253,
                  125,
                  235,
                  168,
                  178,
                  118,
                  247,
                  148,
                  132,
                  87,
                  69,
                  138,
                  249,
                  48,
                  38,
                  162,
                  157,
                  101,
                  94,
                  204,
                  195,
                  59,
                  23,
                  183,
                  138,
                  180,
                  125,
                  89,
                  223
                ]
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                5,
                41,
                183,
                51,
                223,
                226,
                6,
                143,
                39,
                89,
                245,
                240,
                191,
                162,
                53,
                191,
                118,
                47,
                134,
                180,
                213,
                25,
                153,
                162,
                127,
                46,
                146,
                16,
                126,
                15,
                255,
                67
              ]
            }
          }
        },
        {
          "name": "noop_program"
        },
        {
          "name": "account_compression_authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  112,
                  105,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "account_compression_program",
          "address": "M9w4GyHwyaZJUhsTC5vu6Hcvm4kUe63VKXdRWmMbJ3U"
        },
        {
          "name": "sol_pool_pda",
          "writable": true,
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  111,
                  108,
                  95,
                  112,
                  111,
                  111,
                  108,
                  95,
                  112,
                  100,
                  97
                ]
              }
            ]
          }
        },
        {
          "name": "decompression_recipient",
          "writable": true,
          "optional": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        }
      ],
      "args": [
        {
          "name": "inputs",
          "type": "bytes"
        }
      ]
    },
    {
      "name": "invoke_cpi",
      "discriminator": [
        49,
        212,
        191,
        129,
        39,
        194,
        43,
        196
      ],
      "accounts": [
        {
          "name": "fee_payer",
          "writable": true,
          "signer": true
        },
        {
          "name": "authority",
          "signer": true
        },
        {
          "name": "registered_program_pda",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  122,
                  247,
                  228,
                  253,
                  125,
                  235,
                  168,
                  178,
                  118,
                  247,
                  148,
                  132,
                  87,
                  69,
                  138,
                  249,
                  48,
                  38,
                  162,
                  157,
                  101,
                  94,
                  204,
                  195,
                  59,
                  23,
                  183,
                  138,
                  180,
                  125,
                  89,
                  223
                ]
              }
            ],
            "program": {
              "kind": "const",
              "value": [
                5,
                41,
                183,
                51,
                223,
                226,
                6,
                143,
                39,
                89,
                245,
                240,
                191,
                162,
                53,
                191,
                118,
                47,
                134,
                180,
                213,
                25,
                153,
                162,
                127,
                46,
                146,
                16,
                126,
                15,
                255,
                67
              ]
            }
          }
        },
        {
          "name": "noop_program"
        },
        {
          "name": "account_compression_authority",
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  99,
                  112,
                  105,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          "name": "account_compression_program",
          "address": "M9w4GyHwyaZJUhsTC5vu6Hcvm4kUe63VKXdRWmMbJ3U"
        },
        {
          "name": "invoking_program"
        },
        {
          "name": "sol_pool_pda",
          "writable": true,
          "optional": true,
          "pda": {
            "seeds": [
              {
                "kind": "const",
                "value": [
                  115,
                  111,
                  108,
                  95,
                  112,
                  111,
                  111,
                  108,
                  95,
                  112,
                  100,
                  97
                ]
              }
            ]
          }
        },
        {
          "name": "decompression_recipient",
          "writable": true,
          "optional": true
        },
        {
          "name": "system_program",
          "address": "11111111111111111111111111111111"
        },
        {
          "name": "cpi_context_account",
          "writable": true,
          "optional": true
        }
      ],
      "args": [
        {
          "name": "inputs",
          "type": "bytes"
        }
      ]
    }
  ],
  "accounts": [
    {
      "name": "CpiContextAccount",
      "discriminator": [
        22,
        20,
        149,
        218,
        74,
        204,
        128,
        166
      ]
    },
    {
      "name": "RegisteredProgram",
      "discriminator": [
        31,
        251,
        180,
        235,
        3,
        116,
        50,
        4
      ]
    },
    {
      "name": "StateMerkleTreeAccount",
      "discriminator": [
        172,
        43,
        172,
        186,
        29,
        73,
        219,
        84
      ]
    }
  ],
  "errors": [
    {
      "code": 6000,
      "name": "SumCheckFailed",
      "msg": "Sum check failed"
    },
    {
      "code": 6001,
      "name": "SignerCheckFailed",
      "msg": "Signer check failed"
    },
    {
      "code": 6002,
      "name": "CpiSignerCheckFailed",
      "msg": "Cpi signer check failed"
    },
    {
      "code": 6003,
      "name": "ComputeInputSumFailed",
      "msg": "Computing input sum failed."
    },
    {
      "code": 6004,
      "name": "ComputeOutputSumFailed",
      "msg": "Computing output sum failed."
    },
    {
      "code": 6005,
      "name": "ComputeRpcSumFailed",
      "msg": "Computing rpc sum failed."
    },
    {
      "code": 6006,
      "name": "InvalidNoopPubkey",
      "msg": "InvalidNoopPubkey"
    },
    {
      "code": 6007,
      "name": "InvalidAddress",
      "msg": "InvalidAddress"
    },
    {
      "code": 6008,
      "name": "DeriveAddressError",
      "msg": "DeriveAddressError"
    },
    {
      "code": 6009,
      "name": "CompressedSolPdaUndefinedForCompressSol",
      "msg": "CompressedSolPdaUndefinedForCompressSol"
    },
    {
      "code": 6010,
      "name": "DeCompressLamportsUndefinedForCompressSol",
      "msg": "DeCompressLamportsUndefinedForCompressSol"
    },
    {
      "code": 6011,
      "name": "CompressedSolPdaUndefinedForDecompressSol",
      "msg": "CompressedSolPdaUndefinedForDecompressSol"
    },
    {
      "code": 6012,
      "name": "DeCompressLamportsUndefinedForDecompressSol",
      "msg": "DeCompressLamportsUndefinedForDecompressSol"
    },
    {
      "code": 6013,
      "name": "DecompressRecipientUndefinedForDecompressSol",
      "msg": "DecompressRecipientUndefinedForDecompressSol"
    },
    {
      "code": 6014,
      "name": "WriteAccessCheckFailed",
      "msg": "WriteAccessCheckFailed"
    },
    {
      "code": 6015,
      "name": "InvokingProgramNotProvided",
      "msg": "InvokingProgramNotProvided"
    },
    {
      "code": 6016,
      "name": "InvalidCapacity",
      "msg": "InvalidCapacity"
    },
    {
      "code": 6017,
      "name": "InvalidMerkleTreeOwner",
      "msg": "InvalidMerkleTreeOwner"
    },
    {
      "code": 6018,
      "name": "ProofIsNone",
      "msg": "ProofIsNone"
    },
    {
      "code": 6019,
      "name": "ProofIsSome",
      "msg": "ProofIsSome"
    },
    {
      "code": 6020,
      "name": "EmptyInputs",
      "msg": "EmptyInputs"
    },
    {
      "code": 6021,
      "name": "CpiContextAccountUndefined",
      "msg": "CpiContextAccountUndefined"
    },
    {
      "code": 6022,
      "name": "CpiContextProofMismatch",
      "msg": "CpiContextMismatch"
    },
    {
      "code": 6023,
      "name": "CpiContextEmpty",
      "msg": "CpiContextEmpty"
    },
    {
      "code": 6024,
      "name": "CpiContextMissing",
      "msg": "CpiContextMissing"
    },
    {
      "code": 6025,
      "name": "DecompressionRecipienDefined",
      "msg": "DecompressionRecipienDefined"
    },
    {
      "code": 6026,
      "name": "SolPoolPdaDefined",
      "msg": "SolPoolPdaDefined"
    },
    {
      "code": 6027,
      "name": "AppendStateFailed",
      "msg": "AppendStateFailed"
    },
    {
      "code": 6028,
      "name": "InstructionNotCallable",
      "msg": "The instruction is not callable"
    },
    {
      "code": 6029,
      "name": "CpiContextFeePayerMismatch",
      "msg": "CpiContextFeePayerMismatch"
    }
  ],
  "types": [
    {
      "name": "AccessMetadata",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner",
            "docs": [
              "Owner of the Merkle tree."
            ],
            "type": "pubkey"
          },
          {
            "name": "program_owner",
            "docs": [
              "Delegate of the Merkle tree. This will be used for program owned Merkle trees."
            ],
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "CompressedAccount",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "owner",
            "type": "pubkey"
          },
          {
            "name": "lamports",
            "type": "u64"
          },
          {
            "name": "address",
            "type": {
              "option": {
                "array": [
                  "u8",
                  32
                ]
              }
            }
          },
          {
            "name": "data",
            "type": {
              "option": {
                "defined": {
                  "name": "CompressedAccountData"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "CompressedAccountData",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "discriminator",
            "type": {
              "array": [
                "u8",
                8
              ]
            }
          },
          {
            "name": "data",
            "type": "bytes"
          },
          {
            "name": "data_hash",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CompressedCpiContext",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "set_context",
            "docs": [
              "Is set by the program that is invoking the CPI to signal that is should",
              "set the cpi context."
            ],
            "type": "bool"
          },
          {
            "name": "first_set_context",
            "docs": [
              "Is set to wipe the cpi context since someone could have set it before",
              "with unrelated data."
            ],
            "type": "bool"
          },
          {
            "name": "cpi_context_account_index",
            "docs": [
              "Index of cpi context account in remaining accounts."
            ],
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "CompressedProof",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "a",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "b",
            "type": {
              "array": [
                "u8",
                64
              ]
            }
          },
          {
            "name": "c",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          }
        ]
      }
    },
    {
      "name": "CpiContextAccount",
      "docs": [
        "Collects instruction data without executing a compressed transaction.",
        "Signer checks are performed on instruction data.",
        "Collected instruction data is combined with the instruction data of the executing cpi,",
        "and executed as a single transaction.",
        "This enables to use input compressed accounts that are owned by multiple programs,",
        "with one zero-knowledge proof."
      ],
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "fee_payer",
            "type": "pubkey"
          },
          {
            "name": "associated_merkle_tree",
            "type": "pubkey"
          },
          {
            "name": "context",
            "type": {
              "vec": {
                "defined": {
                  "name": "InstructionDataInvokeCpi"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "InstructionDataInvokeCpi",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "proof",
            "type": {
              "option": {
                "defined": {
                  "name": "CompressedProof"
                }
              }
            }
          },
          {
            "name": "new_address_params",
            "type": {
              "vec": {
                "defined": {
                  "name": "NewAddressParamsPacked"
                }
              }
            }
          },
          {
            "name": "input_compressed_accounts_with_merkle_context",
            "type": {
              "vec": {
                "defined": {
                  "name": "PackedCompressedAccountWithMerkleContext"
                }
              }
            }
          },
          {
            "name": "output_compressed_accounts",
            "type": {
              "vec": {
                "defined": {
                  "name": "OutputCompressedAccountWithPackedContext"
                }
              }
            }
          },
          {
            "name": "relay_fee",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "compress_or_decompress_lamports",
            "type": {
              "option": "u64"
            }
          },
          {
            "name": "is_compress",
            "type": "bool"
          },
          {
            "name": "signer_seeds",
            "type": {
              "vec": "bytes"
            }
          },
          {
            "name": "cpi_context",
            "type": {
              "option": {
                "defined": {
                  "name": "CompressedCpiContext"
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "MerkleTreeMetadata",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "access_metadata",
            "type": {
              "defined": {
                "name": "AccessMetadata"
              }
            }
          },
          {
            "name": "rollover_metadata",
            "type": {
              "defined": {
                "name": "RolloverMetadata"
              }
            }
          },
          {
            "name": "associated_queue",
            "type": "pubkey"
          },
          {
            "name": "next_merkle_tree",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "NewAddressParamsPacked",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "seed",
            "type": {
              "array": [
                "u8",
                32
              ]
            }
          },
          {
            "name": "address_queue_account_index",
            "type": "u8"
          },
          {
            "name": "address_merkle_tree_account_index",
            "type": "u8"
          },
          {
            "name": "address_merkle_tree_root_index",
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "OutputCompressedAccountWithPackedContext",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "compressed_account",
            "type": {
              "defined": {
                "name": "CompressedAccount"
              }
            }
          },
          {
            "name": "merkle_tree_index",
            "type": "u8"
          }
        ]
      }
    },
    {
      "name": "PackedCompressedAccountWithMerkleContext",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "compressed_account",
            "type": {
              "defined": {
                "name": "CompressedAccount"
              }
            }
          },
          {
            "name": "merkle_context",
            "type": {
              "defined": {
                "name": "PackedMerkleContext"
              }
            }
          },
          {
            "name": "root_index",
            "docs": [
              "Index of root used in inclusion validity proof."
            ],
            "type": "u16"
          }
        ]
      }
    },
    {
      "name": "PackedMerkleContext",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "merkle_tree_pubkey_index",
            "type": "u8"
          },
          {
            "name": "nullifier_queue_pubkey_index",
            "type": "u8"
          },
          {
            "name": "leaf_index",
            "type": "u32"
          }
        ]
      }
    },
    {
      "name": "RegisteredProgram",
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "registered_program_id",
            "type": "pubkey"
          },
          {
            "name": "group_authority_pda",
            "type": "pubkey"
          }
        ]
      }
    },
    {
      "name": "RolloverMetadata",
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "index",
            "docs": [
              "Unique index."
            ],
            "type": "u64"
          },
          {
            "name": "rollover_fee",
            "docs": [
              "This fee is used for rent for the next account.",
              "It accumulates in the account so that once the corresponding Merkle tree account is full it can be rolled over"
            ],
            "type": "u64"
          },
          {
            "name": "rollover_threshold",
            "docs": [
              "The threshold in percentage points when the account should be rolled over (95 corresponds to 95% filled)."
            ],
            "type": "u64"
          },
          {
            "name": "network_fee",
            "docs": [
              "Tip for maintaining the account."
            ],
            "type": "u64"
          },
          {
            "name": "rolledover_slot",
            "docs": [
              "The slot when the account was rolled over, a rolled over account should not be written to."
            ],
            "type": "u64"
          },
          {
            "name": "close_threshold",
            "docs": [
              "If current slot is greater than rolledover_slot + close_threshold and",
              "the account is empty it can be closed. No 'close' functionality has been",
              "implemented yet."
            ],
            "type": "u64"
          }
        ]
      }
    },
    {
      "name": "StateMerkleTreeAccount",
      "docs": [
        "Concurrent state Merkle tree used for public compressed transactions."
      ],
      "serialization": "bytemuck",
      "repr": {
        "kind": "c"
      },
      "type": {
        "kind": "struct",
        "fields": [
          {
            "name": "metadata",
            "type": {
              "defined": {
                "name": "MerkleTreeMetadata"
              }
            }
          }
        ]
      }
    }
  ],
  "constants": [
    {
      "name": "SOL_POOL_PDA_SEED",
      "type": "bytes",
      "value": "[115, 111, 108, 95, 112, 111, 111, 108, 95, 112, 100, 97]"
    }
  ]
}